name: Build and Release

on:
  push:
    tags:
      - "v*"  # 仅在推送 vX.X.X 形式的标签时触发

permissions:
  contents: write  # 创建发布所需的权限

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]

    steps:
      - name: 检出仓库
        uses: actions/checkout@v4

      - name: 设置 Rust 环境
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: 构建可执行文件 (Linux)
        if: runner.os == 'Linux'
        run: cargo build --release

      - name: 构建可执行文件 (Windows)
        if: runner.os == 'Windows'
        run: cargo build --release

      - name: 重命名并打包可执行文件 (Linux)
        if: runner.os == 'Linux'
        run: |
          # 从 Cargo.toml 中提取项目名称
          EXECUTABLE=$(grep -m 1 '^name\s*=\s*"' Cargo.toml | sed 's/name\s*=\s*"\(.*\)"/\1/')
          # 从标签中提取版本号，例如 v0.0.2 -> 0.0.2
          VERSION=${{ github.ref_name }}
          VERSION=${VERSION#v}  # 移除前缀 'v'
          # 重命名可执行文件
          mv target/release/$EXECUTABLE target/release/$EXECUTABLE-$VERSION
          # 打包重命名后的文件
          zip executable-linux.zip target/release/$EXECUTABLE-$VERSION

      - name: 重命名并打包可执行文件 (Windows)
        if: runner.os == 'Windows'
        shell: pwsh  # 使用 PowerShell 执行 Windows 命令
        run: |
          # 从 Cargo.toml 中提取项目名称
          $EXECUTABLE = (Get-Content Cargo.toml | Where-Object { $_ -match '^name\s*=\s*"(.*)"' } | ForEach-Object { $matches[1] })
          # 从标签中提取版本号，例如 v0.0.2 -> 0.0.2
          $VERSION = "${{ github.ref_name }}" -replace '^v', ''
          # 重命名可执行文件
          Move-Item -Path "target/release/$EXECUTABLE.exe" -Destination "target/release/$EXECUTABLE-$VERSION.exe"
          # 打包重命名后的文件
          Compress-Archive -Path "target/release/$EXECUTABLE-$VERSION.exe" -DestinationPath "executable-windows.zip"

      - name: 上传构建产物
        uses: actions/upload-artifact@v4
        with:
          name: executable-${{ runner.os }}
          path: executable-*.zip

  release:
    name: 创建 GitHub 发布
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: 下载构建产物
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: 显示下载的文件
        run: ls -R artifacts

      - name: 创建 GitHub 发布
        uses: softprops/action-gh-release@v2
        with:
          files: artifacts/**/*
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: "自动发布 ${{ github.ref_name }}"
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}